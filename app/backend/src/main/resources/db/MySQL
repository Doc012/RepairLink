-- ROLES Table
CREATE TABLE roles (
    roleID INT PRIMARY KEY AUTO_INCREMENT,
    roleType ENUM('ADMIN', 'CUSTOMER', 'VENDOR', 'USER') NOT NULL,
    description TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
INSERT INTO roles (roleType, description) VALUES ('USER', 'Default customer role');
INSERT INTO roles (roleType, description) VALUES ('CUSTOMER', 'Default customer role');
INSERT INTO roles (roleType, description) VALUES ('VENDOR', 'Default customer role');
INSERT INTO roles (roleType, description) VALUES ('ADMIN', 'Default customer role');



-- USERS Table
CREATE TABLE users (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    surname VARCHAR(50) NOT NULL,
    phoneNumber VARCHAR(15),
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT FALSE,
    verificationToken VARCHAR(255),
    verificationTokenExpiry DATETIME,
    verification_attempts INT DEFAULT 0,
    picUrl VARCHAR(255),
    roleID INT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (roleID) REFERENCES roles(roleID)
);


-- CUSTOMERS Table
CREATE TABLE customers (
    customerID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT UNIQUE,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);

-- SERVICE PROVIDERS Table
CREATE TABLE service_providers (
    providerID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT UNIQUE,
    businessName VARCHAR(255),
    serviceCategory VARCHAR(100),
    location VARCHAR(255),
    about TEXT,
    phoneNumber VARCHAR(15),
    verified BOOLEAN DEFAULT FALSE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);

-- SERVICES Table
CREATE TABLE services (
    serviceID INT PRIMARY KEY AUTO_INCREMENT,
    providerID INT,
    serviceName VARCHAR(100),
    description TEXT,
    price DECIMAL(10, 2),
    duration VARCHAR(50),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (providerID) REFERENCES service_providers(providerID) ON DELETE CASCADE
);

-- BOOKINGS Table
CREATE TABLE bookings (
    bookingID INT PRIMARY KEY AUTO_INCREMENT,
    customerID INT,
    serviceID INT,
    providerID INT,
    bookingDate TIMESTAMP,
    additionalNotes TEXT,
    status ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED') DEFAULT 'PENDING',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customerID) REFERENCES customers(customerID) ON DELETE CASCADE,
    FOREIGN KEY (serviceID) REFERENCES services(serviceID) ON DELETE CASCADE,
    FOREIGN KEY (providerID) REFERENCES service_providers(providerID) ON DELETE CASCADE
);



-- REVIEWS Table
CREATE TABLE reviews (
    reviewID INT PRIMARY KEY AUTO_INCREMENT,
    customerID INT,
    bookingID INT UNIQUE,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customerID) REFERENCES customers(customerID) ON DELETE CASCADE,
    FOREIGN KEY (bookingID) REFERENCES bookings(bookingID) ON DELETE CASCADE
);

-- SERVICE HISTORY Table
CREATE TABLE service_history (
    historyID INT PRIMARY KEY AUTO_INCREMENT,
    customerID INT,
    providerID INT,
    serviceID INT,
    bookingID INT,
    serviceDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customerID) REFERENCES customers(customerID) ON DELETE CASCADE,
    FOREIGN KEY (providerID) REFERENCES service_providers(providerID) ON DELETE CASCADE,
    FOREIGN KEY (serviceID) REFERENCES services(serviceID) ON DELETE CASCADE,
    FOREIGN KEY (bookingID) REFERENCES bookings(bookingID) ON DELETE CASCADE
);



CREATE TABLE blacklisted_tokens (
    token VARCHAR(255) PRIMARY KEY,
    blacklistedAt DATETIME NOT NULL,
    expiresAt DATETIME NOT NULL
);


CREATE TABLE password_reset_token (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    token VARCHAR(255) NOT NULL,
    userID INT NOT NULL,
    expiryDate DATETIME NOT NULL,
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);